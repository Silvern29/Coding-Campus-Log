package at.redlinghaus;import java.io.IOException;public class Renderer {    private Field[][] fields;    private Field currentTrolleyField;    /**     * Init the renderer     * @param fields 2dimensional array of fields. The field needs the attribute and functions isEmpty(), Trolley and List<Product>     */    public Renderer(Field[][] fields) {        this.fields = fields;    }    private String checkIFTrolleyOrItem(Field field) {        if (field.getTrolleyOnField() != null) {            currentTrolleyField = field;            return "T";        } else if (field.getProductsOnField().size() > 0) {            return "P";        }        return " ";    }    private String renderTop() {        StringBuilder sB = new StringBuilder();        sB.append("\u250C");        for (int i = 0; i < fields.length-1; i++) {            sB.append("\u2500\u2500");        }        sB.append("\u2500\u2510\n");        return sB.toString();    }    private String renderBottom() {        StringBuilder sB = new StringBuilder();        sB.append("\u2514");        for (int i = 0; i < fields.length-1; i++) {            sB.append("\u2500\u2500");        }        sB.append("\u2500\u2518\n");        return sB.toString();    }    private String renderLine() {        StringBuilder sB = new StringBuilder();        sB.append("\u2502");        for (int i = 0; i < fields.length-1; i++) {            sB.append("\u2500\u2500");        }        sB.append("\u2500\u2502\n");        return sB.toString();    }    private String renderArray() {        StringBuilder sB = new StringBuilder();        sB.append(renderTop());        for (int i = 0; i < fields.length; i++) {            for (int j = 0; j < fields[i].length; j++) {                if(fields[i][j]!=null) {                    if (fields[i][j].isEmpty()) {                        sB.append("\u2502 ");                    } else {                        sB.append("\u2502" + checkIFTrolleyOrItem(fields[i][j]));                    }                }            }            sB.append("\u2502\n");            if(fields.length-1 != i) {                sB.append(renderLine());            }        }        sB.append(renderBottom());        return sB.toString();    }    /**     * Print the field and the current field to the console     */    public void draw() {        System.out.println(renderArray());        if(currentTrolleyField != null) {            System.out.println(currentTrolleyField);        }    }    /**     * Clear the console and draw the array     */    public void render(){//        clearConsole();        draw();    }    //\u2502 = | \u250C = ecke | \u2500 = -    public void clearConsole()    {        try {            if (System.getProperty("os.name").contains("Windows"))                new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();            else                Runtime.getRuntime().exec("clear");        } catch (InterruptedException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }    }}